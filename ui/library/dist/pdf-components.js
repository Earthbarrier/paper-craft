!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("react-pdf"),require("react")):"function"==typeof define&&define.amd?define(["react-pdf","react"],F):"object"==typeof exports?exports["@allenai/pdf-components"]=F(require("react-pdf"),require("react")):Q["@allenai/pdf-components"]=F(Q["react-pdf"],Q.React)}(this,((__WEBPACK_EXTERNAL_MODULE__296__,__WEBPACK_EXTERNAL_MODULE__12__)=>(()=>{var __webpack_modules__={12:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__12__},296:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__296__},337:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ index)\n});\n\n// UNUSED EXPORTS: ArrowFlag, ArrowFlagBase, BoundingBox, ContextProvider, DEFAULT_ZOOM_SCALE, DocumentContext, DocumentWrapper, DownloadButton, HighlightOverlay, IconFlag, Outline, OutlineItem, Overlay, POSITION, PageNumberControl, PageRenderContext, PageWrapper, PercentFormatter, PrintButton, RENDER_TYPE, ScrollContext, SidePanel, Thumbnail, ThumbnailList, TransformContext, UiContext, ZoomInButton, ZoomOutButton, computeBoundingBoxStyle, computePageStyle, generatePageIdFromIndex, getPageHeight, getPageWidth, isSideways, rotateClockwise, rotateCounterClockwise, scaleRawBoundingBox, scrollToId, scrollToPdfPageIndex\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(485);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: external {"commonjs":"react","commonjs2":"react","amd":"react","root":"React"}\nvar external_commonjs_react_commonjs2_react_amd_react_root_React_ = __webpack_require__(12);\n;// ./src/utils/provider.ts\nfunction logProviderWarning(functionName, providerName) {\n    console.warn(`Unable to call ${functionName}. The ${providerName} Provider may not be set up correctly.`);\n}\n\n;// ./src/utils/rotate.ts\nvar PageRotation;\n(function (PageRotation) {\n    PageRotation[PageRotation["Rotate0"] = 0] = "Rotate0";\n    PageRotation[PageRotation["Rotate90"] = 90] = "Rotate90";\n    PageRotation[PageRotation["Rotate180"] = 180] = "Rotate180";\n    PageRotation[PageRotation["Rotate270"] = 270] = "Rotate270";\n})(PageRotation || (PageRotation = {}));\nfunction rotateClockwise(rotation) {\n    switch (rotation) {\n        case PageRotation.Rotate0:\n            return PageRotation.Rotate90;\n        case PageRotation.Rotate90:\n            return PageRotation.Rotate180;\n        case PageRotation.Rotate180:\n            return PageRotation.Rotate270;\n        default:\n            return PageRotation.Rotate0;\n    }\n}\nfunction rotateCounterClockwise(rotation) {\n    switch (rotation) {\n        case PageRotation.Rotate0:\n            return PageRotation.Rotate270;\n        case PageRotation.Rotate90:\n            return PageRotation.Rotate0;\n        case PageRotation.Rotate180:\n            return PageRotation.Rotate90;\n        default:\n            return PageRotation.Rotate180;\n    }\n}\n/**\n * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,\n * e.g. whether the page "is rotated sideways."\n */\nfunction isSideways(rotation) {\n    return rotation === PageRotation.Rotate90 || rotation === PageRotation.Rotate270;\n}\n\n;// ./src/utils/scroll.ts\n\n// Each page div is ID\'d according to page index\n// e.g. reader_pg_0, reader_pg_1, etc.\nconst PAGE_NAV_TARGET_ID_ROOT = \'reader_pg_\';\nconst PDF_HEIGHT_POINTS = 792;\nconst PDF_WIDTH_POINTS = 612;\nfunction generatePageIdFromIndex(pageIndex) {\n    return `${PAGE_NAV_TARGET_ID_ROOT}${pageIndex}`;\n}\nfunction scrollToId(id) {\n    const element = document.getElementById(id);\n    if (element) {\n        element.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'center\' });\n    }\n    else {\n        console.error(`Could not find scroll target with ID #${id}`);\n    }\n}\nfunction scrollToPdfPageIndex(pageIndex) {\n    scrollToId(generatePageIdFromIndex(pageIndex));\n}\n/**\n * Scroll PDF document to a specific position.\n * @param pageIndex The index of the page where the position locates at\n * @param leftPoints The horizontal distance between the origin and the position (in PDF coordinates)\n * @param bottomPoints The vertical distance between the origin and the position (in PDF coordinates)\n * @param rotation The rotation degree of the document\n */\nfunction scrollToPosition(pageIndex, leftPoints, bottomPoints, rotation = PageRotation.Rotate0) {\n    /*\n      Vertical scroll distance is calculated as\n      = total number of previous pages * page height including top/down margins\n      + the margin top of current page\n      + the distance from the page top to the specified position\n  \n      Notice that the scroll distance is measured in pixels,\n      so leftPoints/bottomPoints has to be transformed from points to pixels first.\n    */\n    const { width, height, marginTop, marginBottom, marginLeft, marginRight } = getPagePropertiesInPixels();\n    const heightWithMargins = height + marginTop + marginBottom;\n    // When a paper is rotated, its height and width would be switched automatically. However, leftPoints and bottomPoints remain the same.\n    let marginTopPixels = marginTop;\n    let bottomPixels = (height * bottomPoints) / PDF_HEIGHT_POINTS;\n    let leftPixels = (width * leftPoints) / PDF_WIDTH_POINTS;\n    if (rotation == PageRotation.Rotate90) {\n        marginTopPixels = marginLeft;\n        bottomPixels = (height * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\n        leftPixels = (width * bottomPoints) / PDF_HEIGHT_POINTS;\n    }\n    else if (rotation == PageRotation.Rotate180) {\n        marginTopPixels = marginBottom;\n        bottomPixels = (height * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\n        leftPixels = (width * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\n    }\n    else if (rotation == PageRotation.Rotate270) {\n        marginTopPixels = marginRight;\n        bottomPixels = (height * leftPoints) / PDF_WIDTH_POINTS;\n        leftPixels = (width * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\n    }\n    // Find page element\n    const pageId = generatePageIdFromIndex(pageIndex);\n    const pageIdElement = document.getElementById(pageId);\n    if (!pageIdElement) {\n        return;\n    }\n    // Find first scrollable parent\n    const parentElement = getScrollParent(pageIdElement);\n    if (!parentElement) {\n        return;\n    }\n    // Apply scroll\n    parentElement.scrollTo({\n        top: calculateTopPx({\n            heightWithMarginsInPx: heightWithMargins,\n            pageIndex: pageIndex,\n            marginTopPx: marginTopPixels,\n            heightPx: height,\n            bottomPx: bottomPixels,\n        }),\n        left: Math.floor(leftPixels),\n        behavior: \'smooth\',\n    });\n}\nfunction getScrollParent(node) {\n    const minScrollableHeight = 50; // used to check for a bug where Firefox gives inline containers a small scrollHeight when it shouldnt\n    if (typeof document === \'undefined\') {\n        return null;\n    }\n    if (!node || node.nodeName.toLowerCase() === \'body\') {\n        return document.documentElement;\n    }\n    if (node.scrollHeight - node.clientHeight > minScrollableHeight && !isOverflowIsHidden(node)) {\n        return node;\n    }\n    return getScrollParent(node.parentElement);\n}\nfunction isOverflowIsHidden(node) {\n    const style = getComputedStyle(node);\n    return (style.overflow.includes(\'hidden\') ||\n        style.overflowX.includes(\'hidden\') ||\n        style.overflowY.includes(\'hidden\'));\n}\nfunction calculateTopPx({ heightWithMarginsInPx, pageIndex, marginTopPx, heightPx, bottomPx, }) {\n    return Math.floor(heightWithMarginsInPx * pageIndex + marginTopPx + (heightPx - bottomPx));\n}\n/**\n * Get lengths, widths, and margins of a page.\n * @returns a PageProperties object\n */\nfunction getPagePropertiesInPixels() {\n    const firstPage = document.getElementById(generatePageIdFromIndex(0));\n    if (!firstPage) {\n        console.error(`Cannot get the first page of this document.`);\n        const emptyPageProperties = {\n            width: 0,\n            height: 0,\n            marginTop: 0,\n            marginBottom: 0,\n            marginLeft: 0,\n            marginRight: 0,\n        };\n        return emptyPageProperties;\n    }\n    const style = getComputedStyle(firstPage);\n    const pageProperties = {\n        width: parseInt(style.width),\n        height: parseInt(style.height),\n        marginTop: parseInt(style.marginTop),\n        marginBottom: parseInt(style.marginBottom),\n        marginLeft: parseInt(style.marginLeft),\n        marginRight: parseInt(style.marginRight),\n    };\n    return pageProperties;\n}\nfunction calculateTargetPosition({ scale, leftPoint, bottomPoint, pageDimensions, rotation = PageRotation.Rotate0, }) {\n    switch (rotation) {\n        default:\n        case PageRotation.Rotate0: {\n            const leftPx = (leftPoint / PDF_WIDTH_POINTS) * pageDimensions.width * scale;\n            const topPx = (1 - bottomPoint / PDF_HEIGHT_POINTS) * pageDimensions.height * scale;\n            return { leftPx, topPx };\n        }\n    }\n}\n\n;// ./src/context/DocumentContext.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst DocumentContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    numPages: 0,\n    numPagesLoaded: 0,\n    outline: [],\n    outlinePositions: null,\n    pageDimensions: { height: 0, width: 0 },\n    pdfDocProxy: undefined,\n    getOutlineTargets: opts => {\n        logProviderWarning(`getOutlineTargets(${JSON.stringify(opts)})`, \'DocumentContext\');\n        return [];\n    },\n    setNumPages: numPages => {\n        logProviderWarning(`setNumPages(${numPages})`, \'DocumentContext\');\n    },\n    setNumPagesLoaded: numPages => {\n        logProviderWarning(`setNumPagesLoaded(${numPages})`, \'DocumentContext\');\n    },\n    setOutline: outline => {\n        logProviderWarning(`setOutline(${outline})`, \'DocumentContext\');\n    },\n    setOutlinePositions: outline => {\n        logProviderWarning(`setOutlinePositions(${outline})`, \'DocumentContext\');\n    },\n    setPageDimensions: pageDimensions => {\n        logProviderWarning(`setPageDimensions(${pageDimensions})`, \'DocumentContext\');\n    },\n    setPdfDocProxy: pdfDocProxy => {\n        logProviderWarning(`setPdfDocProxy(${pdfDocProxy})`, \'DocumentContext\');\n    },\n});\nfunction useDocumentContextProps() {\n    const [numPages, setNumPages] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [numPagesLoaded, setNumPagesLoaded] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [outline, setOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [outlinePositions, setOutlinePositions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [pageDimensions, setPageDimensions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState({\n        height: 0,\n        width: 0,\n    });\n    const [pdfDocProxy, setPdfDocProxy] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState();\n    // Draw outline target into the pdf based on the args\n    const getOutlineTargets = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex, scale, rotation, pageDimensions, }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return [];\n        }\n        const positions = (outlinePositions === null || outlinePositions === void 0 ? void 0 : outlinePositions.get(pageNumber)) || [];\n        return positions.map(({ dest, leftPoint, bottomPoint }) => {\n            const { leftPx, topPx } = calculateTargetPosition({\n                scale,\n                rotation,\n                leftPoint,\n                bottomPoint,\n                pageDimensions,\n            });\n            return {\n                dest,\n                leftPx,\n                topPx,\n            };\n        });\n    }, [outlinePositions]);\n    return {\n        numPages,\n        numPagesLoaded,\n        outline,\n        outlinePositions,\n        pageDimensions,\n        pdfDocProxy,\n        getOutlineTargets,\n        setNumPages,\n        setNumPagesLoaded,\n        setOutline,\n        setOutlinePositions,\n        setPageDimensions: setPageDimensions,\n        setPdfDocProxy,\n    };\n}\nfunction buildOutlinePositions(pdfDocProxy, outline) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!outline) {\n            outline = yield pdfDocProxy.getOutline();\n        }\n        // Depth first search through outline items\n        const itemQueue = outline.slice();\n        const proms = [];\n        while (itemQueue.length > 0) {\n            const item = itemQueue.pop();\n            if (!item) {\n                continue; // Not able to process\n            }\n            const { dest, items } = item;\n            // Add child items to queue\n            if (Array.isArray(items)) {\n                itemQueue.push(...items);\n            }\n            // Fetch destinations for item\n            if (Array.isArray(dest)) {\n                proms.push(...dest.map(dest => getDestination(pdfDocProxy, dest)));\n            }\n            else if (typeof dest === \'string\') {\n                proms.push(getDestination(pdfDocProxy, dest));\n            }\n        }\n        // Collect results all at once, so we don\'t have to pay for the cost of\n        // queueing messages sent to the worker\n        const results = yield Promise.all(proms);\n        // Split results into pages\n        const map = new Map();\n        for (const result of results) {\n            if (!result) {\n                continue; // Filter out null\n            }\n            const { pageNumber } = result;\n            if (!map.has(pageNumber)) {\n                map.set(pageNumber, []);\n            }\n            (_a = map.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.push(result);\n        }\n        // Freeze objects so consumers cannot mutate\n        for (const pagePos of map.values()) {\n            for (const pos of pagePos) {\n                Object.freeze(pos);\n            }\n            Object.freeze(pagePos);\n        }\n        Object.freeze(map);\n        return map;\n    });\n}\nfunction getDestination(pdfDocProxy, dest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const result = yield pdfDocProxy.getDestination(dest);\n        if (!result) {\n            return null;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const [ref, _format, leftPoint, bottomPoint] = result;\n        const pageIndex = yield pdfDocProxy.getPageIndex(ref);\n        const pageNumber = pageIndex + 1;\n        return { pageNumber, dest, leftPoint, bottomPoint };\n    });\n}\n\n;// ./src/context/TransformContext.ts\n\n\n\nconst DEFAULT_ZOOM_SCALE = 1.0;\nconst TransformContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    pixelRatio: (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1,\n    rotation: PageRotation.Rotate0,\n    scale: 1,\n    zoomIncrementValue: 0.2,\n    setPixelRatio: pixelRatio => {\n        logProviderWarning(`setPixelRatio(${pixelRatio})`, \'TransformContext\');\n    },\n    setRotation: rotation => {\n        logProviderWarning(`setRotation(${rotation})`, \'TransformContext\');\n    },\n    setScale: scale => {\n        logProviderWarning(`setScale(${scale})`, \'TransformContext\');\n    },\n    setZoomIncrementValue: value => {\n        logProviderWarning(`setZoomIncrementValue(${value})`, \'TransformContext\');\n    },\n});\nfunction useTransformContextProps() {\n    const [pixelRatio, setPixelRatio] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState((typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1);\n    const [rotation, setRotation] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(PageRotation.Rotate0);\n    const [scale, setScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_ZOOM_SCALE);\n    const [zoomIncrementValue, setZoomIncrementValue] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0.2);\n    return {\n        pixelRatio,\n        rotation,\n        scale,\n        setPixelRatio,\n        setRotation,\n        setScale,\n        zoomIncrementValue,\n        setZoomIncrementValue,\n    };\n}\n\n;// ./src/utils/style.ts\n\n// Computes the style for a bounding box, accounting for page roation and page scaling/zoom\nfunction computeBoundingBoxStyle(boundingBoxSize, pageDimensions, rotation, scale) {\n    const { top, left, height, width } = boundingBoxSize;\n    switch (rotation) {\n        case PageRotation.Rotate90:\n            return {\n                top: left * scale,\n                left: (pageDimensions.height - height - top) * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        case PageRotation.Rotate180:\n            return {\n                top: (pageDimensions.height - height - top) * scale,\n                left: (pageDimensions.width - width - left) * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n        case PageRotation.Rotate270:\n            return {\n                top: (pageDimensions.width - width - left) * scale,\n                left: top * scale,\n                height: width * scale,\n                width: height * scale,\n            };\n        default:\n            return {\n                top: top * scale,\n                left: left * scale,\n                height: height * scale,\n                width: width * scale,\n            };\n    }\n}\n// Compute the style for a page, accounting for page rotation and page scaling/zoom\nfunction computePageStyle(pageDimensions, rotation, scale) {\n    return {\n        height: getPageHeight(pageDimensions, rotation) * scale,\n        width: getPageWidth(pageDimensions, rotation) * scale,\n        left: 0,\n        top: 0,\n    };\n}\n// Get page height accounting for page rotation- if the page is rotated on its side, its width becomes its height\nfunction getPageHeight(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.width : pageDimensions.height;\n}\n// Get page width accounting for page rotation- if the page is rotated on its side, its height becomes its width\nfunction getPageWidth(pageDimensions, rotation) {\n    return isSideways(rotation) ? pageDimensions.height : pageDimensions.width;\n}\n\n;// ./src/components/BoundingBox.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\nconst BoundingBox = (_a) => {\n    var { top, left, height, width, className, underlineClassName, id, isHighlighted, onClick, voiceOverLabel } = _a, extraProps = __rest(_a, ["top", "left", "height", "width", "className", "underlineClassName", "id", "isHighlighted", "onClick", "voiceOverLabel"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const boxSize = { top, left, height, width };\n    const componentClassName = classnames_default()(\'pdf-reader__overlay-bounding-box\', isHighlighted === true ? \'pdf-reader__overlay-bounding-box-highlighted\' : \'\', className);\n    const getBoundingBoxStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computeBoundingBoxStyle(boxSize, pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    const rotationClassName = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return `rotate${rotation}`;\n    }, [rotation]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_commonjs_react_commonjs2_react_amd_react_root_React_.Fragment, null,\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: `pdf-reader__overlay-bounding-box-underline ${underlineClassName || rotationClassName()}`, style: getBoundingBoxStyle() }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: id, className: `${componentClassName} ${rotationClassName()}`, style: getBoundingBoxStyle(), onClick: onClick, role: "button", tabIndex: 0, "aria-label": voiceOverLabel }, extraProps))));\n};\n\n// EXTERNAL MODULE: external "react-pdf"\nvar external_react_pdf_ = __webpack_require__(296);\n;// ./src/utils/ScrollDirectionDetector.ts\nvar ScrollDirection;\n(function (ScrollDirection) {\n    ScrollDirection["UP"] = "UP";\n    ScrollDirection["DOWN"] = "DOWN";\n})(ScrollDirection || (ScrollDirection = {}));\nclass ScrollDetector {\n    constructor(el, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold) {\n        this._onScroll = () => {\n            const currScrollTop = this._el.scrollTop;\n            if (this._isAtTop !== (currScrollTop === 0)) {\n                this._isAtTop = currScrollTop === 0;\n                this._setIsAtTop(currScrollTop === 0);\n            }\n            if (this._lastScrollTop === currScrollTop) {\n                return;\n            }\n            // Determine direction\n            const currScrollDirection = (() => {\n                if (currScrollTop <= 0) {\n                    return ScrollDirection.DOWN;\n                }\n                return this._lastScrollTop < currScrollTop ? ScrollDirection.DOWN : ScrollDirection.UP;\n            })();\n            // Update state, if changed\n            this._lastScrollTop = currScrollTop;\n            if (this._lastScrollDirection !== currScrollDirection) {\n                this._lastScrollDirection = currScrollDirection;\n                this._setScrollDirection(currScrollDirection);\n                this._lastScrollTopBeforeDirectionChange = currScrollTop;\n                this._isScrollThresholdReachedInDirection = null;\n                if (this._setScrollThresholdReachedInDirection && !this._isAtTop) {\n                    this._setScrollThresholdReachedInDirection(null);\n                }\n            }\n            else {\n                if (this._scrollThreshold && this._setScrollThresholdReachedInDirection) {\n                    const scrolledAmount = Math.abs(this._lastScrollTopBeforeDirectionChange - currScrollTop);\n                    if (scrolledAmount >= this._scrollThreshold) {\n                        this._isScrollThresholdReachedInDirection = this._lastScrollDirection;\n                        this._setScrollThresholdReachedInDirection(this._lastScrollDirection);\n                    }\n                }\n            }\n        };\n        this._el = el;\n        this._lastScrollTop = this._el.scrollTop;\n        this._lastScrollDirection = null;\n        this._setScrollDirection = setScrollDirection;\n        this._isAtTop = null;\n        this._setIsAtTop = setIsAtTop;\n        this._lastScrollTopBeforeDirectionChange = this._el.scrollTop;\n        this._scrollThreshold = scrollThreshold;\n        this._isScrollThresholdReachedInDirection = null;\n        this._setScrollThresholdReachedInDirection = setScrollThresholdReachedInDirection;\n    }\n    attachScrollListener() {\n        var _a, _b;\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\n            window.addEventListener(\'scroll\', this._onScroll, false);\n            return;\n        }\n        this._el.addEventListener(\'scroll\', this._onScroll, false);\n    }\n    detachScrollListener() {\n        var _a, _b;\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\n            window.removeEventListener(\'scroll\', this._onScroll, false);\n            return;\n        }\n        this._el.removeEventListener(\'scroll\', this._onScroll, false);\n    }\n}\n\n;// ./src/utils/VisibleEntriesDetector.ts\nconst DEFAULT_ROOT_MARGIN = \'50px\';\nconst DEFAULT_THRESHOLD = Array.from({ length: 101 }).map((_, i) => i / 100);\nclass VisibleEntriesDetector {\n    constructor({ root, thresHold, setVisibleEntries, onVisibleEntriesChange, }) {\n        var _a;\n        this._root = root;\n        this._lastVisibleEntries = new Map();\n        this._setVisibleEntries = setVisibleEntries;\n        this._onVisibleEntriesChange = onVisibleEntriesChange;\n        this._observer = new IntersectionObserver(entries => {\n            // Collect visible and hidden elements\n            const visibleEntries = entries.filter(entry => entry.isIntersecting);\n            const hiddenEntries = entries.filter(entry => !entry.isIntersecting);\n            // Determine what needs saved\n            const newVisibleEntries = this._onVisibleEntriesChange({\n                visibleEntries,\n                hiddenEntries,\n                lastEntries: this._lastVisibleEntries,\n            });\n            const frozenEntries = new Map(newVisibleEntries);\n            Object.freeze(frozenEntries);\n            this._lastVisibleEntries = frozenEntries;\n            this._setVisibleEntries(frozenEntries);\n        }, \n        // Default setting for intersection observer\n        {\n            root: ((_a = this._root.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \'html\' ? null : this._root,\n            rootMargin: DEFAULT_ROOT_MARGIN,\n            threshold: thresHold ? thresHold : DEFAULT_THRESHOLD,\n        });\n    }\n    observeNodes(selector) {\n        for (const node of this._root.querySelectorAll(selector)) {\n            this._observer.observe(node);\n        }\n    }\n    destroy() {\n        this._observer.disconnect();\n    }\n}\n\n;// ./src/context/ScrollContext.ts\n\n\n\n\n\nconst OUTLINE_ATTRIBUTE = \'data-outline-target-dest\';\nconst OUTLINE_SELECTOR = \'.pdf-reader__page__outline-target\';\nconst PAGE_NUMBER_ATTRIBUTE = \'data-page-number\';\nconst PAGE_NUMBER_SELECTOR = `.pdf-reader__page[${PAGE_NUMBER_ATTRIBUTE}]`;\nconst DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD = 0.1;\nconst EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP = Object.freeze(new Map());\nconst DEFAULT_CONTEXT = {\n    scrollDirection: null,\n    visibleOutlineTargets: new Map(),\n    visiblePageRatios: new Map(),\n    isOutlineTargetVisible: opts => {\n        logProviderWarning(`isOutlineTargetVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\n        return false;\n    },\n    isPageVisible: opts => {\n        logProviderWarning(`isPageVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\n        return false;\n    },\n    resetScrollObservers: () => {\n        logProviderWarning(`resetScrollObservers()`, \'ScrollContext\');\n    },\n    scrollRoot: {},\n    setScrollRoot: (_el) => {\n        logProviderWarning(`setScrollRoot(...)`, \'ScrollContext\');\n    },\n    scrollToOutlineTarget: dest => {\n        logProviderWarning(`scrollToOutlineTarget(${dest})`, \'ScrollContext\');\n    },\n    setScrollThreshold: (scrollThreshold) => {\n        logProviderWarning(`setScrollThreshold(${scrollThreshold})`, \'ScrollContext\');\n    },\n    scrollToPage: opts => {\n        logProviderWarning(`scrollToPage(${JSON.stringify(opts)})`, \'ScrollContext\');\n    },\n    updateScrollPosition: zoomMultiplier => {\n        logProviderWarning(`updateScrollPosition(${JSON.stringify(zoomMultiplier)})`, \'ScrollContext\');\n    },\n    setIsOutlineClicked: opts => {\n        logProviderWarning(`setIsOutlineGetClicked(${JSON.stringify(opts)})`, \'ScrollContext\');\n    },\n    scrollThresholdReachedInDirection: null,\n    isAtTop: null,\n    isOutlineClicked: null,\n    pagesScrolledIntoView: new Map(),\n    setPageScrolledIntoViewThreshold: (threshold) => {\n        logProviderWarning(`pagesScrolledIntoView(${threshold})`, \'ScrollContext\');\n    },\n};\nconst ScrollContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext(DEFAULT_CONTEXT);\nfunction useScrollContextProps() {\n    // Node used for observing the scroll position\n    const [scrollRoot, setScrollRoot] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    // Determine scroll direction\n    const [scrollDirection, setScrollDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [scrollThreshold, setScrollThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [scrollThresholdReachedInDirection, setScrollThresholdReachedInDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isAtTop, setIsAtTop] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isOutlineClicked, setIsOutlineClicked] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [pageScrolledIntoViewThreshold, setPageScrolledIntoViewThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD);\n    const [pagesScrolledIntoView, setPagesScrolledIntoView] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const scrollElem = scrollRoot || document.documentElement;\n        if (!scrollElem) {\n            return;\n        }\n        let scrollDirectionDetector;\n        if (!scrollThreshold) {\n            // scroll threshold is optional\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop);\n        }\n        else {\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold);\n        }\n        scrollDirectionDetector.attachScrollListener();\n        return () => {\n            scrollDirectionDetector.detachScrollListener();\n        };\n    }, [scrollRoot, scrollThreshold]);\n    // Causes the IntersectionObservers to disconnect and be recreated (useful when DOM changes)\n    const [observerIndex, setObserverIndex] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const resetScrollObservers = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        setObserverIndex(observerIndex + 1);\n    }, [observerIndex]);\n    const [visibleOutlineTargets, setVisibleOutlineNodes] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\n        const map = new Map();\n        Object.freeze(map);\n        return map;\n    });\n    const [visiblePageRatios, setVisiblePageRatios] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\n    const isOutlineTargetVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        return visibleOutlineTargets.has(dest);\n    }, [visibleOutlineTargets]);\n    const scrollToOutlineTarget = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        var _a;\n        setIsOutlineClicked(true);\n        (_a = document\n            .querySelector(`[data-outline-target-dest="${dest}"]`)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\n    }, []);\n    const isPageVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return false;\n        }\n        return visiblePageRatios.has(pageNumber);\n    }, [visiblePageRatios]);\n    const scrollToPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageNumber === \'number\') {\n            pageIndex = pageNumber - 1;\n        }\n        if (typeof pageIndex !== \'number\') {\n            return;\n        }\n        (_a = document\n            .getElementById(generatePageIdFromIndex(pageIndex))) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\n    }, []);\n    // Watch outline nodes\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            setVisibleEntries: setVisibleOutlineNodes,\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\n                hiddenEntries.map(entry => lastEntries.delete(entry.target.getAttribute(OUTLINE_ATTRIBUTE)));\n                const newEntries = new Map(lastEntries);\n                visibleEntries.map(entry => newEntries.set(entry.target.getAttribute(OUTLINE_ATTRIBUTE), {\n                    ratio: entry.intersectionRatio,\n                    timestamp: entry.time,\n                }));\n                return newEntries;\n            },\n        });\n        detector.observeNodes(OUTLINE_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // Watch pages\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            setVisibleEntries: setVisiblePageRatios,\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\n                if (hiddenEntries.length) {\n                    const maxTime = Math.max(...hiddenEntries.map(e => e.time));\n                    const hiddenPageNums = hiddenEntries.map(e => { var _a; return ((_a = e.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\'; });\n                    // due to upper limit on how fast the Intersection Observer API can sample and how fast browsers can render (happens when users scroll fast)\n                    // sometimes entries will not be signaled as hidden, meaning they should be removed from lastEntries but weren\'t\n                    // so if an entry has a timestamp thats older then an entry we are currently removing, we can assume its "stale" and delete\n                    // more details about this issue here: https://stackoverflow.com/questions/61951380/intersection-observer-fails-sometimes-when-i-scroll-fast\n                    for (const [key, value] of lastEntries.entries()) {\n                        if (value.timestamp <= maxTime || hiddenPageNums.includes(String(key))) {\n                            lastEntries.delete(key);\n                        }\n                    }\n                }\n                const newEntries = new Map(lastEntries);\n                visibleEntries.map(entry => {\n                    var _a;\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), {\n                        ratio: entry.intersectionRatio,\n                        timestamp: entry.time,\n                    });\n                });\n                return newEntries;\n            },\n        });\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // map of pages at the moment they are scrolled into view, useful for tracking analytics such as page impressions\n    // different than the visiblePageRatios in that it only saves the ~initial~ point of when a page comes into view\n    // it doesn\'t track the live change in ratios as the page remains in view when scrolled\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const root = scrollRoot || document.documentElement;\n        const detector = new VisibleEntriesDetector({\n            root: root,\n            thresHold: pageScrolledIntoViewThreshold,\n            setVisibleEntries: setPagesScrolledIntoView,\n            onVisibleEntriesChange: ({ visibleEntries }) => {\n                const newEntries = new Map();\n                visibleEntries.map(entry => {\n                    var _a;\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), entry.intersectionRatio);\n                });\n                return newEntries;\n            },\n        });\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\n        return () => {\n            detector.destroy();\n        };\n    }, [scrollRoot, observerIndex]);\n    // calculates a new scroll position after zooming in/out so user doesnt lose their position\n    const updateScrollPosition = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((zoomMultiplier) => {\n        const root = scrollRoot || document.documentElement;\n        if (!root) {\n            return;\n        }\n        const newScrollTop = Math.floor(root.scrollTop * zoomMultiplier);\n        setTimeout(() => {\n            root.scrollTop = newScrollTop;\n        }, 0);\n    }, [scrollRoot]);\n    return {\n        isOutlineTargetVisible,\n        isPageVisible,\n        scrollDirection,\n        visibleOutlineTargets,\n        visiblePageRatios,\n        resetScrollObservers,\n        scrollRoot,\n        setScrollRoot,\n        scrollToOutlineTarget,\n        setScrollThreshold,\n        scrollToPage,\n        updateScrollPosition,\n        setIsOutlineClicked,\n        scrollThresholdReachedInDirection,\n        isAtTop,\n        isOutlineClicked,\n        pagesScrolledIntoView,\n        setPageScrolledIntoViewThreshold,\n    };\n}\n\n;// ./src/context/UiContext.ts\n\n\nconst UiContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    errorMessage: null,\n    isLoading: false,\n    isShowingHighlightOverlay: false,\n    isShowingOutline: false,\n    isShowingTextHighlight: false,\n    isShowingThumbnail: false,\n    setErrorMessage: errorMessage => {\n        logProviderWarning(`setErrorMessage(${errorMessage})`, \'UiContext\');\n    },\n    setIsShowingOutline: isShowingOutline => {\n        logProviderWarning(`setIsShowingOutline(${isShowingOutline})`, \'UiContext\');\n    },\n    setIsLoading: isLoading => {\n        logProviderWarning(`setIsLoading(${isLoading})`, \'UiContext\');\n    },\n    setIsShowingHighlightOverlay: isShowingHighlightOverlay => {\n        logProviderWarning(`setIsShowingHighlightOverlay(${isShowingHighlightOverlay})`, \'UiContext\');\n    },\n    setIsShowingTextHighlight: isShowingTextHighlight => {\n        logProviderWarning(`setIsShowingTextHighlight(${isShowingTextHighlight})`, \'UiContext\');\n    },\n    setIsShowingThumbnail: isShowingThumbnail => {\n        logProviderWarning(`setIsShowingThumbnail(${isShowingThumbnail})`, \'UiContext\');\n    },\n});\nfunction useUiContextProps() {\n    const [errorMessage, setErrorMessage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const [isLoading, setIsLoading] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(true);\n    const [isShowingHighlightOverlay, setIsShowingHighlightOverlay] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingOutline, setIsShowingOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingTextHighlight, setIsShowingTextHighlight] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [isShowingThumbnail, setIsShowingThumbnail] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    return {\n        errorMessage,\n        isLoading,\n        isShowingHighlightOverlay,\n        isShowingOutline,\n        isShowingTextHighlight,\n        isShowingThumbnail,\n        setErrorMessage,\n        setIsLoading,\n        setIsShowingHighlightOverlay,\n        setIsShowingOutline,\n        setIsShowingTextHighlight,\n        setIsShowingThumbnail,\n    };\n}\n\n;// ./src/utils/errorMessage.ts\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getErrorMessage(error) {\n    if (!error) {\n        return \'Unknown error\';\n    }\n    if (typeof error === \'string\') {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    if (typeof error.error === \'string\') {\n        return error.error;\n    }\n    return error.toString();\n}\n\n;// ./src/utils/pdfWorker.ts\n\n// Set PDFjs worker source or else PDF will not load when this library is imported as a package.\nfunction initPdfWorker() {\n    external_react_pdf_.pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${external_react_pdf_.pdfjs.version}/pdf.worker.min.js`;\n}\n\n;// ./src/utils/reader-utils.ts\nconst RENDER_TYPE = {\n    MULTI_CANVAS: \'multi-canvas\',\n    SINGLE_CANVAS: \'single-canvas\',\n};\nfunction getRenderMode(renderType) {\n    switch (renderType) {\n        case RENDER_TYPE.SINGLE_CANVAS:\n            return \'none\';\n        default:\n            return \'canvas\';\n    }\n}\nfunction getClassNameSuffixFromRenderType(renderType) {\n    switch (renderType) {\n        case RENDER_TYPE.SINGLE_CANVAS:\n            return \'single-canvas\';\n        default:\n            return \'multi-canvas\';\n    }\n}\n\n;// ./src/utils/scale.ts\n// We assume 96 DPI for display\n// TODO: There are more accurate ways to do this, but this is what ScholarPhi does now\nconst DPI = 96;\n// PDF units are in 1/72nds of an inch\nconst USER_UNIT_DENOMINATOR = 72;\n/**\n * Given a PDFPageProxy, calculates the screen pixel size of the PDF page at 100% scale\n * @param page The PDFPageProxy to calculate size for\n * @returns Pixel size of a page at 100% scale assuming 96DPI display\n */\nfunction computePageDimensions(page) {\n    const [leftPx, topPx, rightPx, bottomPx] = page.view;\n    const PPI = (page.userUnit / USER_UNIT_DENOMINATOR) * DPI;\n    return {\n        height: (bottomPx - topPx) * PPI,\n        width: (rightPx - leftPx) * PPI,\n    };\n}\n\n;// ./src/components/types/destination.ts\n/**\n * This class is the definition of the first item when Destination is returned as an array.\n * It is created based on the same class in \'react-pdf\' library:\n * https://github.com/wojtekmaj/react-pdf/blob/ca4453f123af51e2faed39a8a62800901030459a/src/Ref.js\n */\nclass Ref {\n    constructor({ num, gen }) {\n        this.num = num;\n        this.gen = gen;\n    }\n    toString() {\n        return this.gen !== 0 ? `${this.num}R${this.gen}` : `${this.num}R`;\n    }\n}\n\n;// ./src/components/DocumentWrapper.tsx\nvar DocumentWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nconst DocumentWrapper = (_a) => {\n    var { children, renderType } = _a, extraProps = DocumentWrapper_rest(_a, ["children", "renderType"]);\n    initPdfWorker();\n    const { pdfDocProxy, setNumPages, setNumPagesLoaded, setPageDimensions, setPdfDocProxy } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { resetScrollObservers, updateScrollPosition } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const { setErrorMessage, setIsLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\n    const [lastScale, setLastScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(1); // assuming the scale defaults to 100%\n    function getFirstPage(pdfDoc) {\n        // getPage uses 1-indexed pageNumber, not 0-indexed pageIndex\n        return pdfDoc.getPage(1);\n    }\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        resetScrollObservers();\n    }, []);\n    // after scale changes, update scroll position so the user stays looking at the same position of the paper\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (scale === lastScale) {\n            return;\n        }\n        const zoomMultiplier = scale / lastScale;\n        updateScrollPosition(zoomMultiplier);\n        setLastScale(scale);\n    }, [scale, updateScrollPosition]);\n    const onPdfLoadSuccess = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pdfDoc) => {\n        setNumPagesLoaded(0);\n        setNumPages(pdfDoc.numPages);\n        getFirstPage(pdfDoc)\n            .then(page => {\n            setPageDimensions(computePageDimensions(page));\n            setErrorMessage(null);\n        })\n            .catch(error => {\n            setErrorMessage(getErrorMessage(error));\n        })\n            .finally(() => {\n            setIsLoading(false);\n        });\n        if (!pdfDocProxy) {\n            setPdfDocProxy(pdfDoc);\n        }\n    }, []);\n    const onSourceError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\n        setErrorMessage(getErrorMessage(error));\n        setIsLoading(false);\n    }, []);\n    const onPdfLoadError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\n        setErrorMessage(getErrorMessage(error));\n        setIsLoading(false);\n    }, []);\n    const onItemClicked = (param) => {\n        if (!pdfDocProxy) {\n            return;\n        }\n        // Scroll to the destination of the item\n        pdfDocProxy.getDestination(param.dest).then(destArray => {\n            if (!destArray) {\n                return;\n            }\n            const [ref, , , bottomPoints] = destArray;\n            pdfDocProxy.getPageIndex(new Ref(ref)).then(refInfo => {\n                scrollToPosition(parseInt(refInfo.toString()), 0, bottomPoints, rotation);\n            });\n        });\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Document, Object.assign({ options: { cMapUrl: \'cmaps/\', cMapPacked: true }, onSourceError: onSourceError, onLoadError: onPdfLoadError, onLoadSuccess: onPdfLoadSuccess, externalLinkTarget: "_blank", renderMode: getRenderMode(renderType), \n        // @ts-ignore: the arguments should be { dest, pageIndex, pageNumber }\n        // @types/react-pdf hasn\'t updated the function signature\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d73eb652e0ba8f89395a0ef2ba69cf1e640ce5be/types/react-pdf/dist/Document.d.ts#L72\n        onItemClick: onItemClicked }, extraProps), children));\n};\n\n;// ./src/components/DownloadButton.tsx\nvar DownloadButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n/**\n * HTML anchor tag allows you to download a file from the same origin.\n * This is a workaround to download a file served from a different origin\n */\nconst DownloadButton = (_a) => {\n    var { pdfUrl, children, className } = _a, extraProps = DownloadButton_rest(_a, ["pdfUrl", "children", "className"]);\n    const [fetching, setFetching] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const download = () => {\n        setFetching(true);\n        fetch(pdfUrl)\n            .then(response => response.blob())\n            .then(blob => {\n            setFetching(false);\n            const blobURL = URL.createObjectURL(blob);\n            const a = document.createElement(\'a\');\n            a.href = blobURL;\n            a.download = pdfUrl.split(\'/\').pop() || pdfUrl;\n            document.body.appendChild(a);\n            a.click();\n        });\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ disabled: fetching, onClick: () => download(), "aria-label": "Download PDF", className: `pdf-reader__download-btn ${className}` }, extraProps), children ? children : \'Download\'));\n};\n\n;// ./src/components/HighlightOverlay.tsx\nvar HighlightOverlay_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst HighlightOverlay = (_a) => {\n    var { children, pageIndex } = _a, extraProps = HighlightOverlay_rest(_a, ["children", "pageIndex"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const maskId = `highlight-overlay-mask-${pageIndex}`;\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    const getUnmaskedArea = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((boundingBoxes) => {\n        const boxes = Array.isArray(boundingBoxes) ? boundingBoxes : [boundingBoxes];\n        return boxes.map((box, i) => {\n            const boxStyle = computeBoundingBoxStyle(box.props, pageDimensions, rotation, scale);\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: boxStyle, x: boxStyle.left, y: boxStyle.top, key: i, fill: "black" }));\n        });\n    }, [pageDimensions, rotation, scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__page-highlight-overlay", style: getPageStyle() }, extraProps),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { className: "page-mask", style: getPageStyle() },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("mask", { id: maskId },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white" }),\n                children && getUnmaskedArea(children)),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white", opacity: "0.6", mask: `url(#${maskId})` }))));\n};\n\n;// ./src/components/marker/ArrowFlagBase.tsx\nvar ArrowFlagBase_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\nconst POSITION = {\n    LEFT: \'LEFT\',\n    RIGHT: \'RIGHT\',\n};\nconst DEFAULT_ORIGIN_TOP_PX = 0;\nconst DEFAULT_FLAG_WIDTH_PX = 62;\nconst DEFAULT_FLAG_HEIGHT_PX = 20;\nconst DEFAULT_TAIL_LENGTH_PX = 40;\nconst DEFAULT_TAIL_WIDTH_PX = 7;\nconst ArrowFlagBase = (_a) => {\n    var { className, label, flagWidth, originTop, position = POSITION.LEFT, tailLength, tailWidgth } = _a, extraProps = ArrowFlagBase_rest(_a, ["className", "label", "flagWidth", "originTop", "position", "tailLength", "tailWidgth"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    // function for scaling bounding boxes based on current document states\n    const computeSize = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((box) => computeBoundingBoxStyle(box, pageDimensions, rotation, scale), [pageDimensions, rotation, scale, originTop]);\n    // bounding box of the flag\n    const flagSize = {\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\n        left: 0,\n        height: DEFAULT_FLAG_HEIGHT_PX,\n        width: flagWidth || DEFAULT_FLAG_WIDTH_PX,\n    };\n    // bounding box of the tail\n    const tailSize = {\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\n        left: 0,\n        height: tailLength || DEFAULT_TAIL_LENGTH_PX,\n        width: tailWidgth || DEFAULT_TAIL_WIDTH_PX,\n    };\n    const computedFlagSize = computeSize(flagSize);\n    const computedTailSize = computeSize(tailSize);\n    const tailPosition = {\n        top: computedTailSize.top,\n        left: position === POSITION.LEFT ? -computedTailSize.width : pageDimensions.width * scale,\n        height: computedTailSize.height,\n        width: computedTailSize.width,\n    };\n    const renderFlag = () => {\n        const { top, width, height } = computedFlagSize;\n        const flagPosition = {\n            top,\n            height,\n            width,\n            left: position === POSITION.LEFT\n                ? -computedTailSize.width\n                : tailPosition.left + tailPosition.width - width + 1,\n        };\n        const labelPosition = position === POSITION.LEFT ? \'47%\' : \'53%\';\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__flag", style: flagPosition },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(IconFlag, { className: "pdf-reader__arrow-flag-base__flag-icon", headerPosition: position },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("text", { x: labelPosition, y: "54%", dominantBaseline: "middle", textAnchor: "middle", className: "pdf-reader__arrow-flag-base__flag-label" }, label))));\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag-base\', className) }, extraProps),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__tail", style: tailPosition }),\n        label && renderFlag()));\n};\n\n;// ./src/components/icon/IconFlag.tsx\n\n\nconst IconFlag = ({ children, className, headerPosition = POSITION.LEFT, }) => {\n    if (headerPosition == POSITION.LEFT) {\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M52.0108 20.8315L52.0105 20.8318C51.5525 21.2525 50.9527 21.491 50.3265 21.5H3.02828C2.35623 21.5 1.71264 21.2355 1.23885 20.7661C0.76522 20.2969 0.5 19.6615 0.5 19V3C0.5 2.33848 0.765221 1.70309 1.23885 1.23389C1.71264 0.764519 2.35623 0.5 3.02828 0.5H50.2457C50.8719 0.50902 51.4718 0.747466 51.9298 1.16821L51.93 1.16846L60.6515 9.16846L60.6514 9.16852L60.658 9.17439C60.9175 9.40408 61.126 9.68412 61.2707 9.99679C61.4154 10.3095 61.4933 10.6482 61.4996 10.9917C61.5059 11.3353 61.4405 11.6765 61.3074 11.9941C61.1749 12.3104 60.9779 12.5966 60.7286 12.8348L52.0108 20.8315Z" }),\n            children));\n    }\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M9.98922 1.16846L9.9895 1.16821C10.4475 0.747472 11.0473 0.509029 11.6735 0.499999L58.9717 0.500004C59.6438 0.500004 60.2874 0.764522 60.7611 1.23389C61.2348 1.7031 61.5 2.33848 61.5 3L61.5 19C61.5 19.6615 61.2348 20.2969 60.7611 20.7661C60.2874 21.2355 59.6438 21.5 58.9717 21.5L11.7543 21.5C11.1281 21.491 10.5282 21.2525 10.0702 20.8318L10.07 20.8315L1.34854 12.8315L1.3486 12.8315L1.34196 12.8256C1.08248 12.5959 0.87399 12.3159 0.729283 12.0032C0.584584 11.6905 0.506719 11.3518 0.500417 11.0083C0.494111 10.6647 0.559495 10.3235 0.692605 10.0059C0.825143 9.68961 1.02206 9.40341 1.27136 9.16519L9.98922 1.16846Z" }),\n        children));\n};\n\n;// ./src/components/types/boundingBox.ts\n// Calculate a bounding box\'s pixel coordinates from the raw bounding box\'s coorditate ratios scaled to the page size\nfunction scaleRawBoundingBox(boundingBoxRaw, pageHeight, pageWidth) {\n    const boxScaled = {\n        page: boundingBoxRaw.page,\n        top: boundingBoxRaw.top * pageHeight,\n        left: boundingBoxRaw.left * pageWidth,\n        height: boundingBoxRaw.height * pageHeight,\n        width: boundingBoxRaw.width * pageWidth,\n    };\n    return boxScaled;\n}\n\n;// ./src/components/marker/ArrowFlag.tsx\nvar ArrowFlag_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\nconst CENTER_LINE = 0.5;\nconst LINE_HEIGHT_MULTIPLIER = 1.5;\nconst ArrowFlag = (_a) => {\n    var { boundingBoxes, className, label } = _a, extraProps = ArrowFlag_rest(_a, ["boundingBoxes", "className", "label"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const convertRatioToPx = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((rawBoundingBox) => scaleRawBoundingBox(rawBoundingBox, pageDimensions.height, pageDimensions.width), [pageDimensions]);\n    if (boundingBoxes.length == 0)\n        return null;\n    // If any bounding boxes span over the center line, we know that either the paper is\n    // single-column or a mix of single-column and two-column. In such case, bounding\n    // boxes will not be divided so as to guarantee only 1 flag is rendered on the left side.\n    const hasWideBox = boundingBoxes.some(({ left, width }) => left < CENTER_LINE && left + width >= CENTER_LINE);\n    let leftBoundingBoxes = boundingBoxes, rightBoundingBoxes = [];\n    if (!hasWideBox) {\n        leftBoundingBoxes = boundingBoxes.filter(({ left }) => left < CENTER_LINE);\n        rightBoundingBoxes = boundingBoxes.filter(({ left }) => left >= CENTER_LINE);\n    }\n    // To handle a special case where the previous bounding box is on the right while\n    // the later is on the left. In such case, there are only 2 bounding boxes.\n    // The vertical distance between the two boxes is used to differentiate whether this case\n    // happens on a single-column paper or a two-column paper. If it\'s the previous, then\n    // the whole flag should appear on the left. Both bounding boxes will be categorized\n    // as leftBoundingBoxes. Otherwise, the tail wrapping still applies.\n    if (leftBoundingBoxes.length === 1 && rightBoundingBoxes.length === 1) {\n        // If the vertical difference between the two boxes is smaller then 1.5 times line height,\n        // the paper is categorized as single-column. Both bounding boxes are set to leftBoundingBoxes.\n        // ArrowFlag will appear on the left\n        if (Math.abs(rightBoundingBoxes[0].top - leftBoundingBoxes[0].top) <\n            LINE_HEIGHT_MULTIPLIER * rightBoundingBoxes[0].height) {\n            leftBoundingBoxes = boundingBoxes;\n            rightBoundingBoxes = [];\n        }\n    }\n    // Sort bounding boxes by their top positions\n    leftBoundingBoxes.sort((first, second) => first.top - second.top);\n    rightBoundingBoxes.sort((first, second) => first.top - second.top);\n    const renderArrowFlagBase = (boxes, position, showLabel) => {\n        if (boxes.length == 0)\n            return null;\n        const firstBox = convertRatioToPx(boxes[0]), lastBox = convertRatioToPx(boxes[boxes.length - 1]);\n        const props = {\n            label: showLabel ? label : undefined,\n            tailLength: lastBox.top + lastBox.height - firstBox.top,\n            originTop: firstBox.top,\n            position,\n        };\n        return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ArrowFlagBase, Object.assign({}, props));\n    };\n    const hasLeftFlag = leftBoundingBoxes.length > 0;\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag\', className) }, extraProps),\n        renderArrowFlagBase(leftBoundingBoxes, POSITION.LEFT, hasLeftFlag),\n        renderArrowFlagBase(rightBoundingBoxes, POSITION.RIGHT, !hasLeftFlag)));\n};\n\n;// ./src/components/outline/OutlineItem.tsx\n\n\n\nconst OutlineItem = ({ items, onClick }) => {\n    const { isOutlineTargetVisible } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    if (!items || !items.length) {\n        return null;\n    }\n    function renderItem(item) {\n        var _a;\n        const clickHandler = (event) => {\n            event.preventDefault();\n            if (onClick) {\n                onClick(item.dest);\n            }\n        };\n        // If an item has sub titles, render <OutlineItem />\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: ((_a = item.dest) === null || _a === void 0 ? void 0 : _a.toString()) || item.title, className: classnames_default()(\'reader__outline-item\', {\n                \'reader__outline-item--target-visible\': isOutlineTargetVisible(item.dest),\n            }) },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { href: "#", onClick: clickHandler, "data-test-id": "reader-outline-item" }, item.title),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: item.items, onClick: onClick })));\n    }\n    return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "reader__outline-items" }, items.map(item => renderItem(item)));\n};\n\n;// ./src/components/outline/Outline.tsx\nvar Outline_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst Outline = (_a) => {\n    var extraProps = Outline_rest(_a, []);\n    const { outline, pdfDocProxy, setOutline, setOutlinePositions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { scrollToOutlineTarget, resetScrollObservers } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (outline) {\n            return;\n        }\n        if (!pdfDocProxy) {\n            return;\n        }\n        pdfDocProxy\n            .getOutline()\n            .then((outlineArray) => {\n            setOutline(outlineArray);\n            return buildOutlinePositions(pdfDocProxy, outlineArray);\n        })\n            .then(outlinePositions => {\n            setOutlinePositions(outlinePositions);\n        })\n            .then(() => {\n            resetScrollObservers();\n        });\n    }, [outline]);\n    const clickHandler = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\n        if (!dest) {\n            return;\n        }\n        scrollToOutlineTarget(dest);\n        return;\n    }, []);\n    if (!pdfDocProxy) {\n        return null;\n    }\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "reader__outline" }, extraProps), !!outline && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: outline, onClick: clickHandler })));\n};\n\n;// ./src/components/Overlay.tsx\nvar Overlay_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\nconst Overlay = (_a) => {\n    var { children } = _a, extraProps = Overlay_rest(_a, ["children"]);\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const getOverlayStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return computePageStyle(pageDimensions, rotation, scale);\n    }, [pageDimensions, rotation, scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__overlay", style: getOverlayStyle() }, extraProps), children));\n};\n\n;// ./src/utils/MaxVisibleElement.ts\nfunction getMaxVisibleElement(visibleElements) {\n    let maxVisibleKey = null;\n    let maxRatio = 0;\n    for (const [visibleKey, { ratio }] of visibleElements) {\n        if (maxRatio < ratio) {\n            maxVisibleKey = visibleKey;\n            maxRatio = ratio;\n        }\n    }\n    return maxVisibleKey;\n}\n\n;// ./src/components/PageNumberControl.tsx\n\n\n\n\n\nconst DELAY_SCROLL_TIME_OUT_MS = 1000;\nconst PageNumberControl = ({ className }) => {\n    const delayTimerRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef();\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const [minPage, setMinPage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\n    const [userInput, setUserInput] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(\'0\');\n    // Initialize page control element\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (numPages != 0) {\n            setMinPage(1);\n        }\n    }, [numPages]);\n    // Everytime we scroll through the page this useEffect\n    // will trigger and set current page based on our current\n    // scroll position\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (visiblePageRatios.size !== 0) {\n            const maxVisiblePageNumber = getMaxVisibleElement(visiblePageRatios);\n            if (maxVisiblePageNumber) {\n                setUserInput(maxVisiblePageNumber.toString());\n            }\n        }\n    }, [visiblePageRatios]);\n    const onPageNumberChange = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        const { value } = event.currentTarget;\n        // Decimal case\n        if (!Number.isInteger(value)) {\n            setUserInput(parseInt(value, 10).toString());\n        }\n        setUserInput(value);\n        if (delayTimerRef.current) {\n            clearTimeout(delayTimerRef.current);\n        }\n        // After user input the page that they want to scroll to\n        // our ref will start setting a delay around 1s before scroll\n        // to the position that user desire\n        const newPageNumber = parseInt(value, 10);\n        if (newPageNumber >= minPage && newPageNumber <= numPages) {\n            delayTimerRef.current = setTimeout(() => {\n                scrollToPage({ pageNumber: newPageNumber });\n            }, DELAY_SCROLL_TIME_OUT_MS);\n        }\n    }, [minPage, numPages, scrollToPage]);\n    const handleBlur = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        if (delayTimerRef.current) {\n            clearTimeout(delayTimerRef.current);\n        }\n        const pageNumber = parseInt(userInput, 10);\n        if (Number.isNaN(pageNumber)) {\n            return;\n        }\n        delayTimerRef.current = setTimeout(() => {\n            scrollToPage({ pageNumber: pageNumber });\n        }, DELAY_SCROLL_TIME_OUT_MS);\n    }, [userInput, scrollToPage]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page-number-control\', className) },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { "aria-label": "Current Page", className: "pdf-reader__page-number-control__current-page", type: "number", name: "currentPage", value: userInput, onChange: onPageNumberChange, onBlur: handleBlur }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { className: "pdf-reader__page-number-control__separator " }, "/"),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { "aria-label": "Total Pages", className: "pdf-reader__page-number-control__total-pages" }, numPages)));\n};\n\n;// ./src/context/PageRenderContext.ts\nvar PageRenderContext_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nconst PageRenderContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\n    pageRenderStates: new Map(),\n    getObjectURLForPage: args => {\n        logProviderWarning(`getObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return null;\n    },\n    isBuildingObjectURLForPage: args => {\n        logProviderWarning(`isBuildingObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return false;\n    },\n    isFinishedBuildingAllPagesObjectURLs: () => {\n        logProviderWarning(`isFinishedBuildingAllPagesObjectURLs()`, \'PageRenderContext\');\n        return false;\n    },\n    buildObjectURLForPage: args => {\n        logProviderWarning(`buildObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\n        return Promise.resolve(\'\');\n    },\n});\nfunction usePageRenderContextProps({ pdfDocProxy, pixelRatio, scale, visiblePageRatios, }) {\n    const [pageRenderStates, _setPageRenderStates] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\n        const map = new Map();\n        Object.freeze(map);\n        return map;\n    });\n    // Because rendering a page is async, we will lose the current pageRenderStates\n    // This ref trick allows the latest to be accessible when the objectURL is ready\n    const pageRenderStatesRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(pageRenderStates);\n    const setPageRenderStates = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pageRenderStates) => {\n        pageRenderStatesRef.current = pageRenderStates;\n        _setPageRenderStates(pageRenderStates);\n    }, [pageRenderStatesRef]);\n    const isBuildingObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return false;\n        }\n        const state = pageRenderStates.get(pageNumber);\n        if (!state) {\n            return false;\n        }\n        return !state.objectURL;\n    }, [pageRenderStates]);\n    const isFinishedBuildingAllPagesObjectURLs = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        var _a;\n        if (!pdfDocProxy)\n            return false;\n        for (let pageNumber = 1; pageNumber <= pdfDocProxy.numPages; pageNumber++) {\n            if (!((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL)) {\n                return false;\n            }\n        }\n        return true;\n    }, [pdfDocProxy, pageRenderStates]);\n    const getObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            return null;\n        }\n        return ((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL) || null;\n    }, [pageRenderStates]);\n    const buildObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\n        var _a;\n        if (typeof pageIndex === \'number\') {\n            pageNumber = pageIndex + 1;\n        }\n        if (typeof pageNumber !== \'number\') {\n            throw new Error(\'prop "pageNumber" is not a number\');\n        }\n        if (!pdfDocProxy) {\n            throw new Error(\'cannot build a page until a "pdfDocProxy" is set on DocumentContext\');\n        }\n        // Don\'t need to start another task if already rendered\n        const existingPromise = (_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.promise;\n        if (existingPromise) {\n            return existingPromise;\n        }\n        const promise = buildPageObjectURL({\n            pageNumber,\n            pdfDocProxy,\n            pixelRatio,\n            scale,\n            promiseTimestamp: flushTimestamp,\n        });\n        const renderState = {\n            promise,\n            objectURL: null,\n        };\n        promise.then(objectURL => {\n            if (!objectURL)\n                return;\n            renderState.objectURL = objectURL;\n            const newPageRenderStates = new Map(pageRenderStatesRef.current);\n            Object.freeze(newPageRenderStates);\n            setPageRenderStates(newPageRenderStates);\n        });\n        const newPageRenderStates = new Map(pageRenderStatesRef.current);\n        newPageRenderStates.set(pageNumber, renderState);\n        Object.freeze(newPageRenderStates);\n        setPageRenderStates(newPageRenderStates);\n        return promise;\n    }, [pageRenderStates, pdfDocProxy, scale]);\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        const visiblePages = [...visiblePageRatios.keys()];\n        if (!pdfDocProxy || [...pageRenderStates.keys()].length === pdfDocProxy.numPages) {\n            return;\n        }\n        const priorityQueue = getPriorityQueue(visiblePages, pdfDocProxy.numPages);\n        for (const pageNumber of priorityQueue) {\n            buildObjectURLForPage({ pageNumber });\n        }\n    }, [pageRenderStates, pdfDocProxy, visiblePageRatios]);\n    // Flush page render states when scale changes\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        // Clean memory of old generated images\n        for (const [, renderState] of pageRenderStatesRef.current) {\n            if (renderState.objectURL) {\n                URL.revokeObjectURL(renderState.objectURL);\n            }\n        }\n        // if current async promises dont have this timestamp, then we flush them\n        flushTimestamp = new Date().getTime();\n        // Clear all page render states, so pages can rebuild images\n        const newPageRenderStates = new Map();\n        Object.freeze(newPageRenderStates);\n        setPageRenderStates(newPageRenderStates);\n    }, [scale, pixelRatio]);\n    return {\n        pageRenderStates,\n        getObjectURLForPage,\n        isBuildingObjectURLForPage,\n        isFinishedBuildingAllPagesObjectURLs,\n        buildObjectURLForPage,\n    };\n}\nfunction getNeighboringPages(pages, numTotalPages) {\n    return pages.length === 0\n        ? []\n        : [Math.max(1, pages[0] - 1), Math.min(numTotalPages, pages[pages.length - 1] + 1)];\n}\nfunction getPriorityQueue(visiblePages, numPages) {\n    const visiblePagesNeighbors = getNeighboringPages(visiblePages, numPages);\n    const allPages = Array.from({ length: numPages }, (_, i) => i + 1);\n    const priorityQueue = new Set([...visiblePages, ...visiblePagesNeighbors, ...allPages]); // put into set to remove duplicats\n    return Array.from(priorityQueue); // convert set to array\n}\n// This boost causes the rendered image to be scaled up by this amount\nconst SCALE_BOOST = 2;\n// Generate an object url for a given page, rendered in a shared canvas\nfunction buildPageObjectURL({ pageNumber, pdfDocProxy, pixelRatio = (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 0, scale = 1, imageType = \'image/png\', imageQuality = 1.0, promiseTimestamp, }) {\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\n        const pageProxy = yield pdfDocProxy.getPage(pageNumber);\n        const blob = yield useRenderCanvas((canvas) => PageRenderContext_awaiter(this, void 0, void 0, function* () {\n            if (promiseTimestamp !== flushTimestamp) {\n                return promiseTimestamp; // flush stale promise\n            }\n            // Render page in a canvas\n            const viewport = pageProxy.getViewport({ scale: scale * pixelRatio * SCALE_BOOST });\n            canvas.height = viewport.height;\n            canvas.width = viewport.width;\n            const canvasContext = canvas.getContext(\'2d\');\n            if (!canvasContext) {\n                throw new Error(\'canvas was unable to get a context\');\n            }\n            const renderTask = pageProxy.render({\n                canvasContext,\n                viewport,\n                intent: \'print\', // immediately render pages on inactive pages\n            });\n            yield renderTask.promise;\n            yield new Promise(resolve => setTimeout(resolve, 16));\n            // Fetch a blob for an image of the canvas\n            return new Promise((resolve, reject) => {\n                try {\n                    canvas.toBlob(blob => resolve(blob), imageType, imageQuality);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n        }));\n        if (typeof blob === \'number\') {\n            return \'\';\n        }\n        // Convert blob image to object url\n        if (!blob) {\n            throw new Error(\'unable to create image from page\');\n        }\n        return URL.createObjectURL(blob);\n    });\n}\nlet renderCanvas = null;\n// Get or create a shared canvas for rendering pages in\nfunction getRenderCanvas() {\n    if (!renderCanvas) {\n        renderCanvas = document.createElement(\'canvas\');\n    }\n    return renderCanvas;\n}\nlet flushTimestamp = new Date().getTime();\nlet nextCanvasUse = Promise.resolve();\n// Use the shared canvas to render a page, using promises to create a queue\nfunction useRenderCanvas(callback) {\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        let resolve = (_value) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        let reject = (_reason) => { };\n        const prom = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        nextCanvasUse = nextCanvasUse.then(() => callback(getRenderCanvas()).then(resolve, reject));\n        const result = yield prom;\n        yield new Promise(res => setTimeout(res, 16)); // Give some time between renders\n        return result;\n    });\n}\n\n;// ./src/components/PageWrapper.tsx\nvar PageWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\nconst PageWrapper = (_a) => {\n    var { children, error, loading, loadingContentForBuildingImage, noData, pageIndex, renderType } = _a, extraProps = PageWrapper_rest(_a, ["children", "error", "loading", "loadingContentForBuildingImage", "noData", "pageIndex", "renderType"]);\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const { pageDimensions, getOutlineTargets, setNumPagesLoaded } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    const { getObjectURLForPage, isBuildingObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\n    const { isLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\n    const objectURLForPage = getObjectURLForPage({ pageIndex });\n    const isBuildingPageImage = isBuildingObjectURLForPage({ pageIndex });\n    // Don\'t display until we have page size data\n    // TODO: Handle this nicer so we display either the loading or error treatment\n    if (!pageDimensions) {\n        return null;\n    }\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        const styles = computePageStyle(pageDimensions, rotation, scale);\n        if (objectURLForPage) {\n            styles.backgroundImage = `url(${objectURLForPage})`;\n        }\n        return styles;\n    }, [pageDimensions, rotation, scale, objectURLForPage]);\n    const getWidth = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        return getPageWidth(pageDimensions, rotation);\n    }, [pageDimensions, rotation]);\n    const outlineTargets = getOutlineTargets({\n        pageIndex,\n        scale,\n        rotation,\n        pageDimensions,\n    });\n    const markPageAsLoaded = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\n        setNumPagesLoaded(prevNumPagesLoaded => prevNumPagesLoaded + 1);\n    }, []);\n    // Width needs to be set to prevent the outermost Page div from extending to fit the parent,\n    // and mis-aligning the text layer.\n    // TODO: Can we CSS this to auto-shrink?\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: generatePageIdFromIndex(pageIndex), className: classnames_default()(\'pdf-reader__page\', { \'pdf-reader__page--has-page-image\': objectURLForPage }, { \'pdf-reader__page--no-page-image\': !objectURLForPage }, `pdf-reader__page--render-type-${getClassNameSuffixFromRenderType(renderType)}`, { \'pdf-reader__is-building-page-image\': isBuildingPageImage }), "data-page-number": pageIndex + 1, style: getPageStyle() }, extraProps),\n        children,\n        isBuildingPageImage && !isLoading && (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page\', {\n                \'pdf-reader__page--is-loading-image\': isBuildingPageImage,\n            }) }, loadingContentForBuildingImage)),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Page, { width: getWidth(), error: error, loading: loading, noData: noData, pageIndex: pageIndex, scale: scale, rotate: rotation, renderAnnotationLayer: true, onGetTextSuccess: markPageAsLoaded }),\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__page__outline-targets" }, outlineTargets.map(({ dest, leftPx, topPx }) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { key: dest, className: "pdf-reader__page__outline-target", "data-outline-target-dest": dest, "data-test-id": "pdf-reader__page__outline-target", style: { left: leftPx + \'px\', top: topPx + \'px\' } }))))));\n};\n\n;// ./src/components/PrintButton.tsx\nvar PrintButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n/**\n * HTML anchor tag allows you to download a file from the same origin.\n * This is a workaround to download a file served from a different origin\n */\nconst PrintButton = (_a) => {\n    var { children, className } = _a, extraProps = PrintButton_rest(_a, ["children", "className"]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ onClick: () => onClickPrint(), "aria-label": "Print PDF", className: `pdf-reader__print-btn ${className}` }, extraProps), children ? children : \'Print\'));\n};\nfunction onClickPrint() {\n    window.print();\n}\n\n;// ./src/utils/util.ts\n// This function returns min or max if value exceeds the range, otherwise\n// the original value is returned\nconst bandPassFilter = (value, min, max) => {\n    return Math.min(Math.max(value, min), max);\n};\n\n;// ./src/components/SidePanel.tsx\nvar SidePanel_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst DEFAULT_MIN_WIDTH_PX = 300;\nconst DEFAULT_MAX_WIDTH_PX = 700;\nconst SidePanel = (_a) => {\n    var { minWidthPx = DEFAULT_MIN_WIDTH_PX, maxWidthPx = DEFAULT_MAX_WIDTH_PX, className, children, header, content, footer, dragHandlePosition, closeButton, isVisible = true, onClose } = _a, extraProps = SidePanel_rest(_a, ["minWidthPx", "maxWidthPx", "className", "children", "header", "content", "footer", "dragHandlePosition", "closeButton", "isVisible", "onClose"]);\n    // The overlay is used to catch mouse up events over iframe contents\n    // so the mouseup events will not be missed if the click is released over\n    // the iframe and the event listeners will fail to be removed\n    const [isOverlayVisible, setIsOverlayVisible] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\n    const [panelWidth, setPanelWidth] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(minWidthPx);\n    const sidePanelRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\n    const dragHandleRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\n    const renderCloseButton = () => {\n        if (typeof closeButton === \'boolean\') {\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", { className: "pdf-reader__side-panel-close-button", onClick: onClose }, "x"));\n        }\n        return closeButton;\n    };\n    const renderDragHandle = () => {\n        const isDragHandleOnLeft = dragHandlePosition === \'left\';\n        const isDragHandleOnRight = dragHandlePosition === \'right\';\n        if (!isDragHandleOnLeft && !isDragHandleOnRight) {\n            return null;\n        }\n        const onMouseMove = (mouseMoveEvent) => {\n            if (!sidePanelRef || !sidePanelRef.current) {\n                return;\n            }\n            const newWidth = dragHandlePosition === \'left\'\n                ? sidePanelRef.current.getBoundingClientRect().right - mouseMoveEvent.pageX\n                : mouseMoveEvent.pageX - sidePanelRef.current.getBoundingClientRect().left;\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\n        };\n        const onMouseUp = () => {\n            // drop opacity styling on drag handle\n            if (dragHandleRef && dragHandleRef.current) {\n                dragHandleRef.current.removeAttribute(\'style\');\n            }\n            setIsOverlayVisible(false);\n            document.body.removeEventListener(\'mousemove\', onMouseMove);\n        };\n        const onDraggingHandle = () => {\n            // prevent flashing when the mouse hovers outside the resize zone\n            if (dragHandleRef && dragHandleRef.current) {\n                dragHandleRef.current.style.opacity = \'1\';\n            }\n            setIsOverlayVisible(true);\n            document.body.addEventListener(\'mousemove\', onMouseMove);\n            document.body.addEventListener(\'mouseup\', onMouseUp, { once: true });\n        };\n        const onChangePanelWidth = (event) => {\n            const newWidth = parseInt(event.currentTarget.value);\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\n        };\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__resize-zone\', {\n                \'pdf-reader__resize-zone--left\': isDragHandleOnLeft,\n                \'pdf-reader__resize-zone--right\': isDragHandleOnRight,\n            }) },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { className: "pdf-reader__drag-handle__assistive-input", type: "range", min: minWidthPx, max: maxWidthPx, step: "5", value: panelWidth, onChange: onChangePanelWidth }),\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { ref: dragHandleRef, role: "slider", "aria-valuenow": panelWidth, tabIndex: -1, onMouseDown: onDraggingHandle, className: "pdf-reader__drag-handle" },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__drag-handle__inner" }))));\n    };\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ ref: sidePanelRef, style: { width: panelWidth }, className: classnames_default()(\'pdf-reader__side-panel\', { \'pdf-reader__side-panel--hidden\': !isVisible }, className) }, extraProps),\n        renderDragHandle(),\n        closeButton && renderCloseButton(),\n        header && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("h2", { className: "pdf-reader__side-panel-title" }, header),\n        content && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-content" }, content),\n        footer && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-footer" }, footer),\n        children,\n        isOverlayVisible && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-overlay" })));\n};\n\n;// ./src/components/thumbnails/Thumbnail.tsx\n\n\n\n\n\nconst Thumbnail = ({ pageNumber }) => {\n    const { getObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\n    const { isPageVisible, scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\n    const [maxVisiblePageNumber, setMaxVisiblePageNumber] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\n    const objectURL = getObjectURLForPage({ pageNumber });\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\n        if (visiblePageRatios.size !== 0) {\n            const max = getMaxVisibleElement(visiblePageRatios);\n            if (max) {\n                setMaxVisiblePageNumber(max.toString());\n            }\n        }\n    }, [visiblePageRatios]);\n    const isThumbnailVisible = maxVisiblePageNumber &&\n        parseInt(maxVisiblePageNumber) === pageNumber &&\n        isPageVisible({ pageNumber });\n    const onClick = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(event => {\n        event.preventDefault();\n        scrollToPage({ pageNumber });\n    }, [pageNumber, scrollToPage]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { "aria-label": `scroll to page ${pageNumber}`, href: `#${pageNumber}`, onClick: onClick, className: classnames_default()(\'pdf-reader__thumbnail\', { \'pdf-reader__thumbnail--no-image\': !objectURL }, { \'pdf-reader__thumbnail--is-visible\': isThumbnailVisible }), "data-page-number": pageNumber, "data-test-id": "thumbnail-link" }, !!objectURL && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("img", { className: "pdf-reader__thumbnail-image", src: objectURL })));\n};\n\n;// ./src/components/thumbnails/ThumbnailList.tsx\n\n\n\nconst ThumbnailList = () => {\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__thumbnail-list-wrapper" },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "pdf-reader__thumbnail-list" }, Array.from({ length: numPages }).map((_, pageIndex) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: pageIndex + 1, className: "pdf-reader__thumbnail-list__item" },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(Thumbnail, { pageNumber: pageIndex + 1 })))))));\n};\n\n;// ./src/utils/format.ts\nconst PercentFormatter = new Intl.NumberFormat(\'en-US\', {\n    style: \'percent\',\n    maximumSignificantDigits: 3,\n});\n\n;// ./src/components/ZoomInButton.tsx\nvar ZoomInButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst MAX_ZOOM_IN_SCALE = 500;\nconst ZoomInButton = (_a) => {\n    var { className, children, onZoom } = _a, extraProps = ZoomInButton_rest(_a, ["className", "children", "onZoom"]);\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const handleZoomIn = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const newScaleValue = scale + zoomIncrementValue;\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\n        if (zoomScale <= MAX_ZOOM_IN_SCALE) {\n            if (onZoom) {\n                onZoom(newScaleValue);\n            }\n            setScale(newScaleValue);\n        }\n    }, [scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-in ${className}`, onClick: handleZoomIn }, extraProps), children ? children : \'+\'));\n};\n\n;// ./src/components/ZoomOutButton.tsx\nvar ZoomOutButton_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst MIN_ZOOM_OUT_SCALE = 20;\nconst ZoomOutButton = (_a) => {\n    var { className, children, onZoom } = _a, extraProps = ZoomOutButton_rest(_a, ["className", "children", "onZoom"]);\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\n    const handleZoomOut = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const newScaleValue = scale - zoomIncrementValue;\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\n        if (zoomScale >= MIN_ZOOM_OUT_SCALE) {\n            if (onZoom) {\n                onZoom(newScaleValue);\n            }\n            setScale(newScaleValue);\n        }\n    }, [scale]);\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-out ${className}`, onClick: handleZoomOut }, extraProps), children ? children : \'-\'));\n};\n\n;// ./src/context/ContextProvider.tsx\n\n\n\n\n\n\nconst ContextProvider = ({ children }) => {\n    const documentProps = useDocumentContextProps();\n    const transformProps = useTransformContextProps();\n    const uiProps = useUiContextProps();\n    const scrollProps = useScrollContextProps();\n    const pageRenderProps = usePageRenderContextProps({\n        pdfDocProxy: documentProps.pdfDocProxy,\n        pixelRatio: transformProps.pixelRatio,\n        scale: transformProps.scale,\n        visiblePageRatios: scrollProps.visiblePageRatios,\n    });\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(DocumentContext.Provider, { value: documentProps },\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(TransformContext.Provider, { value: transformProps },\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(UiContext.Provider, { value: uiProps },\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ScrollContext.Provider, { value: scrollProps },\n                    external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(PageRenderContext.Provider, { value: pageRenderProps }, children))))));\n};\n\n;// ./index.ts\n/*\n * PDF Component Library exports\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const index = ({\n    BoundingBox: BoundingBox,\n    computeBoundingBoxStyle: computeBoundingBoxStyle,\n    computePageStyle: computePageStyle,\n    ContextProvider: ContextProvider,\n    DEFAULT_ZOOM_SCALE: DEFAULT_ZOOM_SCALE,\n    DocumentContext: DocumentContext,\n    DocumentWrapper: DocumentWrapper,\n    DownloadButton: DownloadButton,\n    ArrowFlag: ArrowFlag,\n    ArrowFlagBase: ArrowFlagBase,\n    PrintButton: PrintButton,\n    generatePageIdFromIndex: generatePageIdFromIndex,\n    getPageHeight: getPageHeight,\n    getPageWidth: getPageWidth,\n    HighlightOverlay: HighlightOverlay,\n    IconFlag: IconFlag,\n    isSideways: isSideways,\n    Outline: Outline,\n    OutlineItem: OutlineItem,\n    Overlay: Overlay,\n    PageNumberControl: PageNumberControl,\n    PageRenderContext: PageRenderContext,\n    PageRotation: PageRotation,\n    PageWrapper: PageWrapper,\n    POSITION: POSITION,\n    SidePanel: SidePanel,\n    PercentFormatter: PercentFormatter,\n    RENDER_TYPE: RENDER_TYPE,\n    rotateClockwise: rotateClockwise,\n    rotateCounterClockwise: rotateCounterClockwise,\n    scaleRawBoundingBox: scaleRawBoundingBox,\n    scrollToId: scrollToId,\n    scrollToPdfPageIndex: scrollToPdfPageIndex,\n    Thumbnail: Thumbnail,\n    ThumbnailList: ThumbnailList,\n    ScrollContext: ScrollContext,\n    TransformContext: TransformContext,\n    UiContext: UiContext,\n    ZoomInButton: ZoomInButton,\n    ZoomOutButton: ZoomOutButton,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///337\n')},485:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQjs7QUFFaEI7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSyxLQUE2QjtBQUNsQztBQUNBO0FBQ0EsR0FBRyxTQUFTLElBQTRFO0FBQ3hGO0FBQ0EsRUFBRSxpQ0FBcUIsRUFBRSxtQ0FBRTtBQUMzQjtBQUNBLEdBQUc7QUFBQSxrR0FBQztBQUNKLEdBQUcsS0FBSyxFQUVOO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanM/NGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///485\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F);var __webpack_exports__=__webpack_require__(337);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));